name: CI # Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust_version: [nightly, 1.87.0]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_version }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Prepare compiled data
        env:
          TMP_DIR: ${{ runner.temp }}
        run: cargo +nightly run -F codegen
        
      - name: Run tests
        env:
          TMP_DIR: ${{ runner.temp }}
        run: cargo +nightly test --all-features

  clippy_check:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Prepare compiled data
        env:
          TMP_DIR: ${{ runner.temp }}
        run: cargo +nightly run -F codegen

      - name: Run Clippy
        env:
          TMP_DIR: ${{ runner.temp }}
        run: cargo +nightly clippy --all-features --all-targets -- --deny warnings

  cargo_fmt:
    name: Enforce Rust code format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Check format
        run: cargo +nightly fmt --all -- --check

  docs_rs:
    name: Preflight docs.rs build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install nightly Rust toolchain
        # Nightly is used here because the docs.rs build
        # uses nightly and we use doc_cfg features that are
        # not in stable Rust as of this writing (Rust 1.72).
        uses: dtolnay/rust-toolchain@nightly

      - name: Run cargo docs
        # This is intended to mimic the docs.rs build
        # environment. The goal is to fail PR validation
        # if the subsequent release would result in a failed
        # documentation build on docs.rs.
        run: cargo +nightly doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: --cfg docsrs
          DOCS_RS: 1

  cargo-deny:
    name: License / vulnerability audit
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        checks:
          - advisories
          - licenses bans sources

    # Prevent sudden announcement of a new advisory from failing CI:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Audit crate dependencies
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}

  unused_deps:
    name: Check for unused dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Prepare compiled data
        env:
          TMP_DIR: ${{ runner.temp }}
        run: cargo +nightly run -F codegen

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        env:
          TMP_DIR: ${{ runner.temp }}
        with:
          version: latest
          args: --all-targets --all-features
